?read.csv
flights <- read.csv('data/flights.csv')
flights <- read.csv('data/flights.csv.gz')
unique(flights$X)
flights <- read.csv('data/flights.csv.gz')
unique(flights$DAY_OF_WEEK)
flights <- read.csv('data/flights.csv.gz')
unique(flights$DAY_OF_WEEK)
unique(flights$X)
devtools::install_github("dgrtwo/gganimate")
install.packages("shiny")
install.packages("Ecdat")
library(Ecdat)
plot(as.ts(flights))
plot(as.ts(x=flights$FL_DATE, y=flights$DEP_DELAY))
plot(as.ts(x=flights$FL_DATE, y=flights$DEP_DELAY))
?as.ts
is.ts(flights)
flights[order(FL_DATE),]$DEP_DELAY
flights[order(flights$FL_DATE),]$DEP_DELAY
na.rm(flights[order(flights$FL_DATE),]$DEP_DELAY)
na.omit(flights[order(flights$FL_DATE),]$DEP_DELAY)
flights[order(flights$FL_DATE),]$DEP_DELAY
as.ts(flights[order(flights$FL_DATE),]$DEP_DELAY)
plot(as.ts(flights[order(flights$FL_DATE),]$DEP_DELAY))
plot(as.ts(flights[order(flights$FL_DATE),]$DEP_DELAY))
plot(as.ts(flights[order(flights$FL_DATE),]$DEP_DELAY))
flights_time <- as.ts(flights[order(flights$FL_DATE),]$DEP_DELAY)
library(tidyverse)
?sortby
??sortby
?dplyr
flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarize(mean(ARR_DELAY))
flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarize(mean=mean(ARR_DELAY))
flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise_each(funs(mean(ARR_DELAY, na.rm = TRUE)))
flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(funs(mean(ARR_DELAY, na.rm = TRUE)))
flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(ARR_DELAY, na.rm = TRUE))
flight_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(ARR_DELAY, na.rm = TRUE))
flight_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(ARR_DELAY, na.rm = TRUE))
names(flight_delay)
flight_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(ARR_DELAY, na.rm = TRUE))
names(flight_delay) <- c('FL_DATE', 'AVE_DELAY')
arr_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(ARR_DELAY, na.rm = TRUE))
names(arr_delay) <- c('FL_DATE', 'AVE_DELAY')
dep_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(DEP_DELAY, na.rm = TRUE))
names(dep_delay) <- c('FL_DATE', 'AVE_DELAY')
arr_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(ARR_DELAY, na.rm = TRUE))
dep_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(DEP_DELAY, na.rm = TRUE))
dep_delay <- flights %>% arrange(FL_DATE) %>% group_by(FL_DATE) %>% summarise(mean(DEP_DELAY, na.rm = TRUE))
names(dep_delay) <- c('FL_DATE', 'AVE_DELAY')
plot(as.ts(arr_delay$AVE_DELAY))
arr_delay$AVE_DELAY
names(arr_delay) <- c('FL_DATE', 'AVE_DELAY')
plot(as.ts(arr_delay$AVE_DELAY))
data(AirPassengers)
timeserie_air = AirPassengers
plot(as.ts(timeserie_air))
plot(as.ts(timeserie_air))
plot(as.ts(timeserie_air))
install.packages("forecast")
install.packages("forecast")
library(forecast)
plot(as.ts(timeserie_air))
lines(trend_air)
#install.packages("forecast")
library(forecast)
trend_air = ma(timeserie_air, order = 12, centre = T)
plot(as.ts(timeserie_air))
lines(trend_air)
plot(as.ts(trend_air))
detrend_air = timeserie_air / trend_air
plot(as.ts(detrend_air))
m_air = t(matrix(data = detrend_air, nrow = 12))
seasonal_air = colMeans(m_air, na.rm = T)
plot(as.ts(rep(seasonal_air,12)))
random_air = timeserie_air / (trend_air * seasonal_air)
plot(as.ts(random_air))
recomposed_air = trend_air*seasonal_air*random_air
plot(as.ts(recomposed_air))
ts_air = ts(timeserie_air, frequency = 12)
decompose_air = decompose(ts_air, "multiplicative")
plot(as.ts(decompose_air$seasonal))
plot(as.ts(decompose_air$trend))
plot(as.ts(decompose_air$random))
plot(decompose_air)
plot(arr_delay$AVE_DELAY)
plot(AirPassengers)
plot(arr_delay$AVE_DELAY)
plot(dep_delay$AVE_DELAY)
plot(arr_delay$AVE_DELAY)
plot(dep_delay$AVE_DELAY)
lm(arr_delay$AVE_DELAY~dep_delay$AVE_DELAY)
summary(lm(arr_delay$AVE_DELAY~dep_delay$AVE_DELAY))
plot(lm(arr_delay$AVE_DELAY~dep_delay$AVE_DELAY))
plot(arr_delay$AVE_DELAY,dep_delay$AVE_DELAY)
library(gganimate)
unique(flights$DIVERTED)
unique(flights$ARR_DELAY)
unique(flights$ARR_DELAY15)
unique(flights$ARR_DEL15)
sum(flights$ARR_DEL15 == 0)
sum(flights$ARR_DEL15 == NA)
sum(na.omit(flights$ARR_DEL15) == 0)
sum(na.omit(flights$ARR_DEL15) == 1)
nrow(flights)
flights.sunday <- flights[flights$DAY_OF_WEEK == 1,]
nrow(flights.sunday)
###
day_of_week = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
arr_delayed <- sum(day$ARR_DEL15)
###
day_of_week = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
i = 1
day <- flights[flights$DAY_OF_WEEK == i,]
total <- nrow(day)
arr_delayed <- sum(day$ARR_DEL15 == 1)
dep_delayed <- sum(day$DEP_DEL15 == 1)
arr_delayed <- sum(day$DIVERTED == 1)
diverted <- sum(day$DIVERTED == 1)
arr_delayed <- sum(day$ARR_DEL15 == 1)
normal <- sum(day[day$ARR_DEL15 == 0 & day$DEP_DEL15 == 0 & day$DIVERTED == 0,])
normal
normal
normal <- nrow(day[day$ARR_DEL15 == 0 & day$DEP_DEL15 == 0 & day$DIVERTED == 0,])
normal
normal/total
data.frame(arrival_delayed=arr_delayed/total, departure_delayed=dep_delayed/total, diverted=diverted/total, normal=normal/total)
arr_delayed <- sum(na.omit(day$ARR_DEL15) == 1)
dep_delayed <- sum(na.omit(day$DEP_DEL15) == 1)
diverted <- sum(day$DIVERTED == 1)
normal <- nrow(day[day$ARR_DEL15 == 0 & day$DEP_DEL15 == 0 & day$DIVERTED == 0,])
day_flights <- data.frame(arrival_delayed=arr_delayed/total, departure_delayed=dep_delayed/total, diverted=diverted/total, normal=normal/total)
day_flights
melt(day_flights)
library(reshape2)
melt(day_flights)
day_flights <- melt(day_flights)
ggplot(day_flights) %>% geom_bar()
day_flights
ggplot(day_flights) %>% geom_bar(aes(value))
names(day_flights) <- c("category","percentage")
ggplot(day_flights) %>% geom_bar(aes(category))
ggplot(day_flights) %>% geom_bar(aes(percentage))
ggplot(day_flights) %>% geom_bar(x=category, y=percentage)
ggplot(day_flights) %>% geom_bar(x="category", y="percentage")
ggplot(day_flights) %>% geom_bar(aes(x="category", y="percentage"))
ggplot(day_flights) %>% geom_bar(aes(x=category, y=percentage))
ggplot(day_flights) + geom_bar(aes(x=category, y=percentage))
ggplot(day_flights) + geom_bar(x=category, y=percentage)
names(day_flights) <- c("category","percentage")
ggplot(day_flights) + geom_bar(x=category, y=percentage)
ggplot(day_flights) + geom_bar(day_flights, aes(x=category, y=percentage))
ggplot() + geom_bar(day_flights, aes(x=category, y=percentage))
ggplot(day_flightsaes(x=category, y=percentage)) + geom_bar()
ggplot(day_flights, aes(x=category, y=percentage)) + geom_bar()
day_flights
ggplot(day_flights, aes(x=category, y=percentage)) + geom_bar(stat = "identity")
ggplot(day_flights, aes(x=category, y=percentage)) + geom_bar(stat = "identity") + ggtitle(day_of_week[i])
flights_by_day <- flights %>% arrange(DAY_OF_WEEK) %>% group_by(DAY_OF_WEEK) %>% summarise(per_arr=sum(ARR_DEL15, na.rm=TRUE)/n(), per_dep=sum(DEP_DELAY, na.rm=TRUE)/n(), div=sum(DIVERTED)/n(), normal=sum(ARR_DEL15 == 0 & DEP_DEL15 == 0 & DIVERTED == 0))
flights_by_day
flights_by_day$DAY_OF_WEEK <- day_of_week[flights_by_day$DAY_OF_WEEK]
flights_by_day
g<- ggplot(flights_by_day, aes(x=category, y=percentage, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")# + ggtitle(day_of_week[i])
gg_animate(g)
library(gganimate)
gg_animate(g)
gganimate(g)
flights_by_day
flights_by_day <- flights %>% arrange(DAY_OF_WEEK) %>% group_by(DAY_OF_WEEK) %>% summarise(per_arr=sum(ARR_DEL15, na.rm=TRUE)/n(), per_dep=sum(DEP_DELAY, na.rm=TRUE)/n(), div=sum(DIVERTED)/n(), normal=sum(ARR_DEL15 == 0 & DEP_DEL15 == 0 & DIVERTED == 0, na.rm=TRUE))
flights_by_day$DAY_OF_WEEK <- day_of_week[flights_by_day$DAY_OF_WEEK]
flights_by_day
flights_by_day <- flights %>% arrange(DAY_OF_WEEK) %>% group_by(DAY_OF_WEEK) %>% summarise(per_arr=sum(ARR_DEL15, na.rm=TRUE)/n(), per_dep=sum(DEP_DELAY, na.rm=TRUE)/n(), div=sum(DIVERTED)/n(), normal=sum(ARR_DEL15 == 0 & DEP_DEL15 == 0 & DIVERTED == 0, na.rm=TRUE)/n())
flights_by_day$DAY_OF_WEEK <- day_of_week[flights_by_day$DAY_OF_WEEK]
dayflights <- melt(flights_by_day)
day_flights
dayflights <- melt(flights_by_day, id.vars = DAY_OF_WEEK)
g <- ggplot(dayflights, aes(x=category, y=percentage, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")# + ggtitle(day_of_week[i])
gganimate(g)
day_flights
dayflights
g <- ggplot(day_flights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")# + ggtitle(day_of_week[i])
gganimate(g)
day_flights
g <- ggplot(dayflights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")# + ggtitle(day_of_week[i])
gganimate(g)
gganimate(g, output.gif)
gganimate(g, "output.gif"")
gganimate(g, "output.gif")
""
gganimate(g, "output.gif")
gganimate(g)
day_flights
dayflights
flights_by_day <- flights %>% arrange(DAY_OF_WEEK) %>% group_by(DAY_OF_WEEK) %>% summarise(per_arr=sum(ARR_DEL15, na.rm=TRUE)/n(), per_dep=sum(DEP_DEL15, na.rm=TRUE)/n(), div=sum(DIVERTED)/n(), normal=sum(ARR_DEL15 == 0 & DEP_DEL15 == 0 & DIVERTED == 0, na.rm=TRUE)/n())
flights_by_day$DAY_OF_WEEK <- day_of_week[flights_by_day$DAY_OF_WEEK]
dayflights <- melt(flights_by_day)
g <- ggplot(dayflights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity") + ggtitle(DAY_OF_WEEK)
g <- ggplot(dayflights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")
gganimate(g)
dayflights
ggplot(flights_by_day, aes(x=factor(category, DAY_OF_WEEK), y=percentage)) + geom_bar(stat = "identity") + ggtitle(day_of_week[i])
flights.sunday <-
nrow(flights.sunday)
g <- ggplot(dayflights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")
gganimate(g)
g <- ggplot(dayflights, aes(x=factor(variable, DAY_OF_WEEK), y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity")
gganimate(g)
g <- ggplot(dayflights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_point()#geom_bar(stat = "identity")
gganimate(g)
g <- ggplot(dayflights, aes(x=variable, y=value, frame=DAY_OF_WEEK)) + geom_bar(stat = "identity", position = "identity")
gganimate(g)
dayflights
gganimate(g, "animate.gif")
library(shiny); runApp('timeseries.R')
ggplot(as.ts(arr_delay$AVE_DELAY)) + geom_line()
as.ts(arr_delay$AVE_DELAY)
library(ggfortify)
install.packages("ggfortify")
ggplot(as.ts(arr_delay$AVE_DELAY)) + geom_line()
autoplot(as.ts(arr_delay$AVE_DELAY)) + geom_line()
?plotOutput
runApp('timeseries.R')
autoplot(as.ts(arr_delay$AVE_DELAY)) + geom_line()
autoplot(as.ts(arr_delay$AVE_DELAY))# + geom_line()
runApp('timeseries.R')
runApp('timeseries.R')
runApp('timeseries.R')
head(arr_delay)
arr_delay[1,]
arr_delay[2,]
round(1.5)
arr_delay
runApp('timeseries.R')
library(dygraphs)
dygraph(Cl(SPY))
install.packages("dygraphs")
print(arr_delay[1,])
head(arr_delay[1,])
head(as.data.frame(arr_delay[1,]))
rand(1)
runApp('timeseries.R')
runApp('timeseries.R')
input$decomp <- "obs"
obser <- plot(ts_air)
runApp('timeseries.R')
runApp('timeseries.R')
runApp('timeseries.R')
data(AirPassengers)
plot(AirPassengers)
ts_air <- ts(AirPassengers, frequency = 12)
decompose_air <- decompose(ts_air, "multiplicative")
plot(decompose_air)
AirPassengers
View(flights)
plot(decompose_air)
plot(decompose_air$seasonal*decompose_air$trend)
plot(AirPassengers)
plot(decompose_air$seasonal*decompose_air$trend)
plot(AirPassengers)
plot(decompose_air$seasonal*decompose_air$trend)
plot(AirPassengers)
plot(decompose_air$seasonal*decompose_air$trend)
plot(decompose_air)
plot(decompose_air$figure)
plot(decompose_air$x)
plot(decompose_air)
plot(decompose_air$seasonal*decompose_air$trend)
plot(decompose_air$x)
plot(decompose_air$seasonal*decompose_air$trend)
plot(decompose_air$x)
